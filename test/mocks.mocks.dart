// Mocks generated by Mockito 5.4.5 from annotations
// in gdm_assignment/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:ui' as _i7;

import 'package:gdm_assignment/moteis/domain/entity/motel.dart' as _i4;
import 'package:gdm_assignment/moteis/domain/entity/suite.dart' as _i5;
import 'package:gdm_assignment/moteis/domain/use_case/get_moteis_use_case.dart'
    as _i2;
import 'package:gdm_assignment/moteis/presentation/state/home_provider.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetMoteisUseCase_0 extends _i1.SmartFake
    implements _i2.GetMoteisUseCase {
  _FakeGetMoteisUseCase_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [HomeProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeProvider extends _i1.Mock implements _i3.HomeProvider {
  MockHomeProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetMoteisUseCase get getMoteisUseCase =>
      (super.noSuchMethod(
            Invocation.getter(#getMoteisUseCase),
            returnValue: _FakeGetMoteisUseCase_0(
              this,
              Invocation.getter(#getMoteisUseCase),
            ),
          )
          as _i2.GetMoteisUseCase);

  @override
  List<_i4.Motel> get motelList =>
      (super.noSuchMethod(
            Invocation.getter(#motelList),
            returnValue: <_i4.Motel>[],
          )
          as List<_i4.Motel>);

  @override
  set motelList(List<_i4.Motel>? _motelList) => super.noSuchMethod(
    Invocation.setter(#motelList, _motelList),
    returnValueForMissingStub: null,
  );

  @override
  List<_i5.Suite> get filteredSuites =>
      (super.noSuchMethod(
            Invocation.getter(#filteredSuites),
            returnValue: <_i5.Suite>[],
          )
          as List<_i5.Suite>);

  @override
  set filteredSuites(List<_i5.Suite>? _filteredSuites) => super.noSuchMethod(
    Invocation.setter(#filteredSuites, _filteredSuites),
    returnValueForMissingStub: null,
  );

  @override
  bool get isFavorite =>
      (super.noSuchMethod(Invocation.getter(#isFavorite), returnValue: false)
          as bool);

  @override
  set isFavorite(bool? _isFavorite) => super.noSuchMethod(
    Invocation.setter(#isFavorite, _isFavorite),
    returnValueForMissingStub: null,
  );

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i6.Future<void> getMotelList() =>
      (super.noSuchMethod(
            Invocation.method(#getMotelList, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  void toggleFavorite() => super.noSuchMethod(
    Invocation.method(#toggleFavorite, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
